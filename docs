<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8" />
  <title>FREETONÁ´ûÂìÅÈìæÊé•Êü•ÊâæÁ≥ªÁªü</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@400;500;700&display=swap');
    
    :root {
      --primary: #2b7de7;
      --primary-light: #4895ef;
      --text: #2b2d42;
      --text-light: #8d99ae;
      --bg: #ffffff;
      --card-bg: rgba(255, 255, 255, 0.85);
      --border-radius: 50px;
      --box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      color: var(--text);
      min-height: 100vh;
      padding: 2rem;
      line-height: 1.6;
      background: url('https://bing.img.run/uhd.php') no-repeat center center fixed;
      background-size: cover;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
    }

    header {
      text-align: center;
      margin-bottom: 2.5rem;
      position: relative;
    }

    h1 {
      font-size: 2.5rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.5rem;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .subtitle {
      color: var(--text-light);
      font-size: 1.1rem;
    }

    .toolbar {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .search-box {
      position: relative;
      max-width: 500px;
      width: 100%;
    }

    .search-box input {
      width: 100%;
      padding: 1rem 1.5rem;
      border: none;
      border-radius: var(--border-radius);
      background: var(--card-bg);
      backdrop-filter: blur(10px);
      box-shadow: var(--box-shadow);
      font-size: 1rem;
      transition: var(--transition);
      padding-left: 3rem;
    }

    .search-box input:focus {
      outline: none;
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
    }

    .search-box::before {
      content: 'üîç';
      position: absolute;
      left: 1.2rem;
      top: 50%;
      transform: translateY(-50%);
      font-size: 1.2rem;
      opacity: 0.6;
    }

    .btn {
      padding: 1rem 1.8rem;
      border: none;
      border-radius: var(--border-radius);
      background: var(--primary);
      color: white;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: var(--box-shadow);
      backdrop-filter: blur(10px);
    }

    .btn:hover {
      background: var(--primary-light);
      transform: translateY(-2px);
    }

    .letter-nav {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 2rem;
    }

    .letter-btn {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      background: var(--card-bg);
      backdrop-filter: blur(10px);
      border: none;
      color: var(--primary);
      font-weight: bold;
      font-size: 1.1rem;
      cursor: pointer;
      transition: var(--transition);
      box-shadow: var(--box-shadow);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .letter-btn:hover, .letter-btn.active {
      background: var(--primary);
      color: white;
      transform: scale(1.1);
    }

    .letter-section {
      background: var(--card-bg);
      backdrop-filter: blur(5px);
      border-radius: var(--border-radius);
      padding: 2rem;
      box-shadow: var(--box-shadow);
      margin-bottom: 2rem;
      transition: var(--transition);
    }

    .letter-section:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 16px rgba(67, 97, 238, 0.1);
    }

    .section-header {
      display: flex;
      align-items: center;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 2px solid rgba(67, 97, 238, 0.2);
    }

    .section-title {
      font-size: 1.5rem;
      color: var(--primary);
      margin-right: 1rem;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--primary);
      color: white;
      border-radius: 50%;
    }

    .section-count {
      color: var(--text-light);
      font-size: 0.9rem;
    }

    .card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
      gap: 1rem;
    }

    .link-card {
      background: rgba(255, 255, 255, 0.7);
      border-radius: 50px;
      padding: 1rem;
      box-shadow: 0 3px 8px rgba(0, 0, 0, 0.05);
      transition: var(--transition);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      min-height: 50px;
      position: relative;
    }

    .link-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(67, 97, 238, 0.1);
      background: white;
    }

    .link-name {
      font-weight: 500;
      color: var(--primary);
      text-decoration: none;
      font-size: 1rem;
      transition: var(--transition);
      margin-bottom: 8px;
    }

    .link-card:hover .link-name {
      color: var(--primary-light);
    }

    .link-actions {
      position: absolute;
      top: 4px;
      right: 4px;
      opacity: 0;
      transition: var(--transition);
    }

    .link-card:hover .link-actions {
      opacity: 1;
    }

    .delete-btn {
      background: none;
      border: none;
      color: #ff6b6b;
      cursor: pointer;
      font-size: 0.8rem;
      transition: var(--transition);
      padding: 0.2rem;
      border-radius: 50%;
    }

    .delete-btn:hover {
      color: #ff0000;
      background: rgba(255, 107, 107, 0.1);
    }

    .admin-panel {
      background: var(--card-bg);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      padding: 2rem;
      box-shadow: var(--box-shadow);
      margin-top: 2rem;
      display: none;
    }

    .admin-panel.visible {
      display: block;
    }

    .panel-title {
      font-size: 1.5rem;
      color: var(--primary);
      margin-bottom: 1.5rem;
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }

    .form-control {
      width: 100%;
      padding: 1rem;
      border: 1px solid rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.7);
      font-size: 1rem;
      transition: var(--transition);
    }

    .form-control:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
    }

    .submit-btn {
      width: 100%;
      padding: 1rem;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
    }

    .submit-btn:hover {
      background: var(--primary-light);
    }

    .empty-state {
      text-align: center;
      padding: 3rem;
      color: var(--text-light);
    }

    .new-badge {
      position: absolute;
      top: -6px;
      right: -6px;
      background: #ff4757;
      color: #ffffff;
      font-size: 12px;
      padding: 2px 6px;
      border-radius: 30px;
      animation: pulse 1.5s infinite;
    }
    
    .level-select {
      position: absolute;
      bottom: 5px;
      right: 5px;
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 2px;
      font-size: 12px;
    }

    .batch-actions {
      margin-top: 2rem;
      padding-top: 2rem;
      border-top: 1px solid rgba(0,0,0,0.1);
    }

    .batch-title {
      font-size: 1.2rem;
      color: var(--primary);
      margin-bottom: 1rem;
    }

    .batch-buttons {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .batch-textarea {
      width: 100%;
      min-height: 150px;
      padding: 1rem;
      border: 1px solid rgba(0,0,0,0.1);
      border-radius: 8px;
      font-family: inherit;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .batch-format {
      font-size: 0.8rem;
      color: var(--text-light);
      margin-bottom: 1rem;
    }

    .batch-format code {
      background: rgba(0,0,0,0.05);
      padding: 2px 4px;
      border-radius: 4px;
    }
    
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.1); }
      100% { transform: scale(1); }
    }

    @media (max-width: 768px) {
      body {
        padding: 1rem;
      }
      
      .toolbar {
        flex-direction: column;
      }
      
      .search-box, .btn {
        width: 100%;
      }
      
      .letter-btn {
        width: 40px;
        height: 40px;
        font-size: 1rem;
      }

      .card-grid {
        grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
      }

      .batch-buttons {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>FREETON-Á´ûÂìÅÈìæÊé•Êü•ÊâæÁ≥ªÁªü</h1>
      <p class="subtitle">¬©2025 POWERED BY BRACE 
      </p>
    </header>

    <div class="toolbar">
      <div class="search-box">
        <input type="text" id="searchInput" placeholder="ÊêúÁ¥¢ÈìæÊé•..." />
      </div>
      <button id="adminLoginBtn" class="btn">
        <i>üîê</i> ÁÆ°ÁêÜÂëòÁôªÂΩï
      </button>
      <button id="importBtn" class="btn">
        <i>üìÅ</i> ÂØºÂÖ•TXT
      </button>
      <input type="file" id="fileInput" accept=".txt" style="display: none;">
    </div>

    <div class="letter-nav" id="letterNav"></div>
    
    <div class="content" id="content">
      <div class="empty-state">
        <p>ËØ∑ÂØºÂÖ•ÈìæÊé•Êï∞ÊçÆÊñá‰ª∂</p>
      </div>
    </div>

    <div class="admin-panel" id="adminPanel">
      <h2 class="panel-title">‚ûï Ê∑ªÂä†Êñ∞ÈìæÊé•</h2>
      <div class="form-group">
        <label for="addLetter">È¶ñÂ≠óÊØç</label>
        <select id="addLetter" class="form-control"></select>
      </div>
      <div class="form-group">
        <label for="addName">ÈìæÊé•ÂêçÁß∞</label>
        <input type="text" id="addName" class="form-control" placeholder="‰æãÂ¶Ç: Google" />
      </div>
      <div class="form-group">
        <label for="addUrl">ÈìæÊé•Âú∞ÂùÄ</label>
        <input type="text" id="addUrl" class="form-control" placeholder="‰æãÂ¶Ç: https://google.com" />
      </div>
      <div class="form-group">
        <label for="addLevel">ÈáçË¶ÅÁ≠âÁ∫ß (1-5Êòü)</label>
        <select id="addLevel" class="form-control">
          <option value="3">‚≠ê‚≠ê‚≠ê (ÈªòËÆ§)</option>
          <option value="1">‚≠ê</option>
          <option value="2">‚≠ê‚≠ê</option>
          <option value="4">‚≠ê‚≠ê‚≠ê‚≠ê</option>
          <option value="5">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</option>
        </select>
      </div>
      <button id="addLinkBtn" class="submit-btn">Ê∑ªÂä†ÈìæÊé•</button>

      <div class="batch-actions">
        <h3 class="batch-title">ÊâπÈáèÊìç‰Ωú</h3>
        <div class="batch-buttons">
          <button id="exportTxtBtn" class="btn">ÂØºÂá∫‰∏∫TXT</button>
          <button id="copyTemplateBtn" class="btn">Â§çÂà∂Ê®°Êùø</button>
        </div>
        <div class="batch-format">
          <p>Ê†ºÂºèËØ¥ÊòéÔºöÊØèË°å‰∏Ä‰∏™ÈìæÊé•ÔºåÊ†ºÂºè‰∏∫ <code>È¶ñÂ≠óÊØç|ÈìæÊé•ÂêçÁß∞|ÈìæÊé•Âú∞ÂùÄ|ÈáçË¶ÅÁ≠âÁ∫ß(1-5)|ÂàõÂª∫Êó∂Èó¥(ÂèØÈÄâ)</code></p>
          <p>Á§∫‰æãÔºö<code>A|Apple|https://apple.com|3|2023-07-20T08:30:00.000Z</code></p>
        </div>
        <textarea id="batchTextarea" class="batch-textarea" placeholder="Ê≠§Â§ÑÊòæÁ§∫ÂØºÂá∫Êï∞ÊçÆ..."></textarea>
      </div>
    </div>
  </div>

  <script>
    // ÂàùÂßãÂåñÊï∞ÊçÆ
    let linkData = {};
    const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
    const contentEl = document.getElementById("content");
    const letterNavEl = document.getElementById("letterNav");
    const adminPanel = document.getElementById("adminPanel");
    let isAdmin = false;

    // ‰øùÂ≠òÊï∞ÊçÆÂà∞localStorage
    function saveToLocalStorage() {
      localStorage.setItem('freetonLinks', JSON.stringify(linkData));
    }

    // ‰ªélocalStorageÂä†ËΩΩÊï∞ÊçÆ
    function loadFromLocalStorage() {
      const savedData = localStorage.getItem('freetonLinks');
      if (savedData) {
        try {
          linkData = JSON.parse(savedData);
          // Á°Æ‰øùÊâÄÊúâÈìæÊé•ÈÉΩÊúâcreatedAtÂíåisNewÂ±ûÊÄß
          Object.keys(linkData).forEach(letter => {
            linkData[letter].forEach(link => {
              if (!link.hasOwnProperty('createdAt')) {
                link.createdAt = link.date || new Date().toISOString();
              }
              if (!link.hasOwnProperty('isNew')) {
                link.isNew = isWithinTwoWeeks(link.createdAt);
              }
            });
          });
        } catch (e) {
          console.error('Ëß£Êûê‰øùÂ≠òÁöÑÊï∞ÊçÆÂ§±Ë¥•:', e);
        }
      }
    }

    // Âà§Êñ≠ÊòØÂê¶Âú®‰∏§Âë®ÂÜÖ
    function isWithinTwoWeeks(dateStr) {
      const addedDate = new Date(dateStr);
      const twoWeeksAgo = new Date();
      twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);
      return addedDate > twoWeeksAgo;
    }

    // ÂàùÂßãÂåñ
    function init() {
      loadFromLocalStorage();
      renderNav();
      setupEventListeners();
      renderContent();
    }

    // ‰ªéÊñáÊú¨Ëß£ÊûêÊï∞ÊçÆ
    function parseDataFromText(text) {
      const newData = {};
      const lines = text.split('\n').filter(line => line.trim());
      
      lines.forEach(line => {
        try {
          const parts = line.split('|');
          const [letter, name, url, levelStr, createdAt] = parts;
          const level = parseInt(levelStr) || 3;
          const date = createdAt || new Date().toISOString();
          
          if (!letter || !name || !url) return;
          
          const upperLetter = letter.toUpperCase();
          if (!alphabet.includes(upperLetter)) return;
          
          if (!newData[upperLetter]) newData[upperLetter] = [];
          
          newData[upperLetter].push({
            name: name.trim(),
            url: url.trim(),
            level,
            createdAt: date,
            isNew: isWithinTwoWeeks(date)
          });
        } catch (e) {
          console.error('Ëß£ÊûêË°åÂ§±Ë¥•:', line, e);
        }
      });
      
      // ÂêàÂπ∂Êñ∞Êï∞ÊçÆÂà∞Áé∞ÊúâÊï∞ÊçÆ
      Object.keys(newData).forEach(letter => {
        if (!linkData[letter]) {
          linkData[letter] = [];
        }
        newData[letter].forEach(newLink => {
          // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®Áõ∏ÂêåÂêçÁß∞ÊàñURLÁöÑÈìæÊé•
          const isDuplicate = linkData[letter].some(link => 
            link.name.toLowerCase() === newLink.name.toLowerCase() || 
            link.url.toLowerCase() === newLink.url.toLowerCase()
          );
          
          if (!isDuplicate) {
            linkData[letter].push(newLink);
          }
        });
      });
      
      saveToLocalStorage();
      return linkData;
    }

    // Ê∏≤ÊüìÂØºËà™Â≠óÊØç
    function renderNav() {
      letterNavEl.innerHTML = "";
      alphabet.forEach(letter => {
        const btn = document.createElement("button");
        btn.className = "letter-btn";
        btn.textContent = letter;
        btn.dataset.letter = letter;
        btn.addEventListener("click", () => {
          document.querySelectorAll(".letter-btn").forEach(b => b.classList.remove("active"));
          btn.classList.add("active");
          const section = document.getElementById(`section-${letter}`);
          if (section) section.scrollIntoView({ behavior: "smooth", block: "start" });
        });
        letterNavEl.appendChild(btn);
      });

      document.getElementById("addLetter").innerHTML =
        alphabet.map(l => `<option value="${l}">${l}</option>`).join("");
    }

    // Ê∏≤ÊüìÂÜÖÂÆπ
    function renderContent() {
      const keyword = document.getElementById("searchInput").value.toLowerCase();
      const hasContent = Object.keys(linkData).some(letter => linkData[letter].length > 0);
      
      if (!hasContent) {
        contentEl.innerHTML = '<div class="empty-state"><p>Ê≤°ÊúâÊâæÂà∞‰ªª‰ΩïÈìæÊé•</p></div>';
        return;
      }

      let contentHTML = "";
      
      Object.keys(linkData).sort().forEach(letter => {
        linkData[letter].sort((a, b) => b.level - a.level);
        
        const filteredLinks = linkData[letter].filter(link => 
          link.name.toLowerCase().includes(keyword)
        );

        if (filteredLinks.length === 0) return;

        let sectionHTML = `
          <div class="letter-section" id="section-${letter}">
            <div class="section-header">
              <div class="section-title">${letter}</div>
              <div class="section-count">${filteredLinks.length}‰∏™ÈìæÊé•</div>
            </div>
            <div class="card-grid">
        `;
        
        filteredLinks.forEach((link, index) => {
          sectionHTML += `
            <div class="link-card">
              ${isWithinTwoWeeks(link.createdAt) ? '<span class="new-badge">NEW</span>' : ''}
              <a href="${link.url}" target="_blank" class="link-name">${link.name}</a>
              ${isAdmin ? `
                <div class="link-actions">
                  <select class="level-select" data-letter="${letter}" data-index="${index}" 
                          onchange="updateLevel(this)">
                    ${[1,2,3,4,5].map(n => 
                      `<option value="${n}" ${link.level===n?'selected':''}>${n}Êòü</option>`
                    ).join('')}
                  </select>
                  <button class="delete-btn" onclick="handleDeleteLink('${letter}', ${index})" title="Âà†Èô§">‚úï</button>
                </div>
              ` : ''}
            </div>
          `;
        });
        
        sectionHTML += `
            </div>
          </div>
        `;
        
        contentHTML += sectionHTML;
      });
      
      contentHTML += `<div style="height: 50px;"></div>`;
      contentEl.innerHTML = contentHTML;
    }

    // Êõ¥Êñ∞Á≠âÁ∫ß
    function updateLevel(select) {
      const letter = select.dataset.letter;
      const index = select.dataset.index;
      const newLevel = parseInt(select.value);
      
      linkData[letter][index].level = newLevel;
      saveData();
      renderContent();
    }

    // Â§ÑÁêÜÂà†Èô§ÈìæÊé•
    function handleDeleteLink(letter, index) {
      if (confirm(`Á°ÆÂÆöË¶ÅÂà†Èô§ "${linkData[letter][index].name}" ÂêóÔºü`)) {
        linkData[letter].splice(index, 1);
        if (linkData[letter].length === 0) {
          delete linkData[letter];
        }
        saveData();
        renderContent();
      }
    }

    // ‰øùÂ≠òÊï∞ÊçÆ
    function saveData() {
      saveToLocalStorage();
      getDataAsText(); // Êõ¥Êñ∞ÊñáÊú¨Âå∫Âüü
    }

    // ÂØºÂá∫‰∏∫TXTÊñá‰ª∂ÂÜÖÂÆπ
    function getDataAsText() {
      let txtContent = "";
      
      Object.keys(linkData).sort().forEach(letter => {
        linkData[letter].forEach(link => {
          txtContent += `${letter}|${link.name}|${link.url}|${link.level}|${link.createdAt}\n`;
        });
      });
      
      document.getElementById('batchTextarea').value = txtContent;
      return txtContent;
    }

    // ÂØºÂá∫‰∏∫TXTÊñá‰ª∂
    document.getElementById("exportTxtBtn").addEventListener("click", function() {
      const txtContent = getDataAsText();
      const blob = new Blob([txtContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `links_export_${new Date().toISOString().slice(0, 10)}.txt`;
      a.click();
      
      URL.revokeObjectURL(url);
      alert(`Â∑≤ÂØºÂá∫ ${txtContent.split('\n').filter(l => l.trim()).length} Êù°ÈìæÊé•`);
    });

    // Â§çÂà∂Ê®°Êùø
    document.getElementById("copyTemplateBtn").addEventListener("click", function() {
      const template = `A|Apple|https://apple.com|3|${new Date().toISOString()}
B|Baidu|https://baidu.com|2|${new Date().toISOString()}
G|Google|https://google.com|5|${new Date().toISOString()}
T|Taobao|https://taobao.com|3|${new Date().toISOString()}`;
      
      navigator.clipboard.writeText(template).then(() => {
        alert("Ê®°ÊùøÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥ÊùøÔºÅ");
      }).catch(err => {
        alert("Â§çÂà∂Â§±Ë¥•ÔºåËØ∑ÊâãÂä®Â§çÂà∂‰ª•‰∏ãÂÜÖÂÆπÔºö\n\n" + template);
      });
    });

    // Êñá‰ª∂ÂØºÂÖ•Â§ÑÁêÜ
    document.getElementById('importBtn').addEventListener('click', () => {
      document.getElementById('fileInput').click();
    });

    document.getElementById('fileInput').addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          parseDataFromText(e.target.result);
          renderContent();
          alert(`ÊàêÂäüÂØºÂÖ• ${Object.values(linkData).flat().length} Êù°ÈìæÊé•`);
        } catch (error) {
          alert('Êñá‰ª∂Ê†ºÂºèÈîôËØØÔºÅËØ∑Á°Æ‰øùÊòØÁ¨¶ÂêàËßÑËåÉÁöÑTXTÊñá‰ª∂');
          console.error(error);
        }
      };
      reader.readAsText(file);
    });

    // ÊêúÁ¥¢Â§ÑÁêÜ
    function handleSearch() {
      renderContent();
    }

    // ÁÆ°ÁêÜÂëòÁôªÂΩï
    function adminLogin() {
      if (isAdmin) {
        isAdmin = false;
        adminPanel.classList.remove("visible");
        renderContent();
        document.getElementById("adminLoginBtn").innerHTML = '<i>üîê</i> ÁÆ°ÁêÜÂëòÁôªÂΩï';
      } else {
        const pwd = prompt("ËØ∑ËæìÂÖ•ÁÆ°ÁêÜÂëòÂØÜÁ†ÅÔºö");
        if (pwd === "admin123") {
          isAdmin = true;
          adminPanel.classList.add("visible");
          renderContent();
          document.getElementById("adminLoginBtn").innerHTML = '<i>üö™</i> ÈÄÄÂá∫ÁÆ°ÁêÜ';
        } else if (pwd !== null) {
          alert("ÂØÜÁ†ÅÈîôËØØÔºÅ");
        }
      }
    }

    // Ê∑ªÂä†ÈìæÊé•
    function addLink() {
      const letter = document.getElementById("addLetter").value;
      const name = document.getElementById("addName").value.trim();
      const url = document.getElementById("addUrl").value.trim();
      const level = parseInt(document.getElementById("addLevel").value);
      
      if (!name || !url) {
        alert("ËØ∑ËæìÂÖ•ÂêçÁß∞ÂíåÈìæÊé•");
        return;
      }
      
      if (!isValidUrl(url)) {
        alert("ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑURL");
        return;
      }
      
      // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®Áõ∏ÂêåÂêçÁß∞ÊàñURLÁöÑÈìæÊé•
      const isDuplicate = linkData[letter]?.some(link => 
        link.name.toLowerCase() === name.toLowerCase() || 
        link.url.toLowerCase() === url.toLowerCase()
      );
      
      if (isDuplicate) {
        alert("ÈìæÊé•Â∑≤Â≠òÂú®(ÂêçÁß∞ÊàñURLÈáçÂ§ç)");
        return;
      }
      
      if (!linkData[letter]) linkData[letter] = [];
      
      linkData[letter].push({ 
        name, 
        url,
        level,
        createdAt: new Date().toISOString(),
        isNew: true
      });
      
      saveData();
      renderContent();
      
      // Ê∏ÖÁ©∫Ë°®Âçï
      document.getElementById("addName").value = "";
      document.getElementById("addUrl").value = "";
    }

    // È™åËØÅURL
    function isValidUrl(url) {
      try {
        new URL(url);
        return true;
      } catch {
        return false;
      }
    }

    // ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
    function setupEventListeners() {
      document.getElementById("searchInput").addEventListener("input", handleSearch);
      document.getElementById("adminLoginBtn").addEventListener("click", adminLogin);
      document.getElementById("addLinkBtn").addEventListener("click", addLink);
    }

    // ÂÖ®Â±ÄÂáΩÊï∞Êö¥Èú≤
    window.updateLevel = updateLevel;
    window.handleDeleteLink = handleDeleteLink;

    // ÂàùÂßãÂåñÂ∫îÁî®
    document.addEventListener('DOMContentLoaded', function() {
      init();
    });
  </script>
</body>
</html>
